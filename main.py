# Set up and run this Streamlit App
import streamlit as st
import llm # <--- This is the helper function that we have created ðŸ†•

from admissionadvisor import admissions_invoke_question
from courseadvisor import courses_invoke_question
from helper_functions import categorise_prompt


# region <--------- Streamlit App Configuration --------->
st.set_page_config(
    layout="centered",
    page_title="My Streamlit App"
)
# endregion <--------- Streamlit App Configuration --------->

st.title("Streamlit App")

form = st.form(key="form")
form.subheader("Prompt")

if "prompt_category" not in st.session_state:
    st.session_state.prompt_category = None

def select_admissions():
    st.session_state.prompt_category = "Admissions"

def select_courses():
    st.session_state.prompt_category = "Courses"

st.sidebar.write(st.session_state.prompt_category)
st.sidebar.button("Admissions", on_click=select_admissions)
st.sidebar.button("Schools/Courses", on_click=select_courses)


user_prompt = form.text_area("What would you like to do?", height=200)
if form.form_submit_button("Submit"):
    st.toast(f"User Input Submitted - {user_prompt}")
    #response = llm.get_completion(user_prompt) # <--- This calls the helper function that we have created ðŸ†•
    #response = admissions_invoke_question(user_prompt)
    #prompt_category = categorise_prompt(user_prompt)
    #response = courses_invoke_question(user_prompt)
    match st.session_state.prompt_category:
        case "Admissions":
            response = admissions_invoke_question(user_prompt)
        case "Courses":
            response = courses_invoke_question(user_prompt)
        case _:
            response = llm.get_completion(user_prompt)

    print(f"\n\nUser Input is {user_prompt}")
    st.write(response) # <--- This displays the response generated by the LLM onto the frontend ðŸ†•
    #st.write(prompt_category) # <--- This displays the response generated by the LLM onto the frontend ðŸ†•
    