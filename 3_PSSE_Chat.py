# Set up and run this Streamlit App
import streamlit as st
import llm # <--- This is the helper function that we have created ðŸ†•

from admissionadvisor import admissions_invoke_question, clear_memory as cm_a, get_chat_history as gch_a
from courseadvisor import courses_invoke_question, clear_memory as cm_c, get_chat_history as gch_c
from logics import categorise_prompt
from utility import check_password  

# Check if the password is correct.  
if not check_password():  
    st.stop()

# region <--------- Streamlit App Configuration --------->
st.set_page_config(
    layout="centered",
    page_title="My Streamlit App"
)
# endregion <--------- Streamlit App Configuration --------->

st.title("Streamlit App")

form = st.form(key="form")
form.subheader("Prompt")

if "prompt_category" not in st.session_state:
    st.session_state.prompt_category = "Admissions"

def select_admissions():
    st.session_state.prompt_category = "Admissions"

def select_courses():
    st.session_state.prompt_category = "Courses"

if "chat_history" not in st.session_state:
    st.session_state.chat_history = ""

def start_over():
    match st.session_state.prompt_category:
        case "Admissions":
            cm_a()
            st.session_state.chat_history = ""
        case "Courses":
            cm_c()
            st.session_state.chat_history = ""

def get_chat_history():
    match st.session_state.prompt_category:
        case "Admissions":
            st.session_state.chat_history = gch_a()
        case "Courses":
            st.session_state.chat_history = gch_c()

st.sidebar.write(st.session_state.prompt_category)
st.sidebar.button("Admissions", on_click=select_admissions)
st.sidebar.button("Schools/Courses", on_click=select_courses)
st.sidebar.button("Start Over", on_click=start_over)

df_list=None

user_prompt = form.text_area("What would you like to do?", height=200)
if form.form_submit_button("Submit"):
    st.toast(f"User Input Submitted - {user_prompt}")
    #response = llm.get_completion(user_prompt) # <--- This calls the helper function that we have created ðŸ†•
    #response = admissions_invoke_question(user_prompt)
    #prompt_category = categorise_prompt(user_prompt)
    #response = courses_invoke_question(user_prompt)
    match st.session_state.prompt_category:
        case "Admissions":
            response = admissions_invoke_question(user_prompt)
        case "Courses":
            response, df_list = courses_invoke_question(user_prompt)
            print(df_list.to_string())
        case _:
            response = "Please select one of the question categories to begin."

    print(f"\n\nUser Input is {user_prompt}")
    st.write(response) # <--- This displays the response generated by the LLM onto the frontend ðŸ†•
    #st.write(prompt_category) # <--- This displays the response generated by the LLM onto the frontend ðŸ†•
    if df_list is None:
        pass
    else:
        st.dataframe(df_list)
    get_chat_history()

###################
abc = """ what if there are other text here.
and here. 
and here.
<json_list>
[
    {
        "School Name": "Temasek Polytechnic",
        "Course Name": "Diploma in Information Technology",
        "Course Code": "C71",
        "Aggregate Score Range": "8-14",
        "Aggregate Score Type": "ELR2B2-B"
    },
    {
        "Institute Name": "Institute of Technical Education - College Central",
        "Course Name": "Higher Nitec in Information Technology",
        "Course Code": "N43",
        "Aggregate Score Range": "17-33",
        "Aggregate Score Type": "ELR2B2-C"
    },
    {
        "Institute Name": "Nanyang Polytechnic",
        "School Name": "School of Information Technology",
        "Course Name": "Diploma in Information Technology",
        "Course Code": "C71",
        "Aggregate Score Range": "11-16",
        "Aggregate Score Type": "ELR2B2-B"
    },
    {
        "Institute Name": "Singapore Polytechnic",
        "School Name": "School of Computing",
        "Course Name": "Diploma in Information Technology",
        "Course Code": "C67",
        "Aggregate Score Range": "11-16",
        "Aggregate Score Type": "ELR2B2-B"
    }
]
</json_list>here too
and also here"""

import re
import json 
import pandas as pd
df_list=None

json_strings = re.findall(r'<json_list>.+</json_list>', abc, flags = re.DOTALL)
if len(json_strings)>0:
   json_strings = re.sub(r'</?json_list>','', json_strings[0])

try:
    json_objs = json.loads(json_strings)
    df_list = pd.json_normalize(json_objs)
except:
   pass

response_text = re.sub(r'<json_list>.+</json_list>', '', abc, flags = re.DOTALL)


if df_list is not None:
    print(df_list.to_string())
    st.dataframe(df_list)

print(response_text)
st.write(response_text)
###################


with st.expander("Chat History"):
    st.subheader(f'''About {st.session_state.prompt_category}''')
    st.write(f'''
        {st.session_state.chat_history}
    ''')