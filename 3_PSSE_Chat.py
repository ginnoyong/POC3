# Set up and run this Streamlit App
import streamlit as st
import llm # <--- This is the helper function that we have created ðŸ†•

from admissionadvisor import admissions_invoke_question, clear_memory as cm_a, get_chat_history as gch_a
from courseadvisor import courses_invoke_question, clear_memory as cm_c, get_chat_history as gch_c
from logics import categorise_prompt
from utility import check_password  

# Check if the password is correct.  
if not check_password():  
    st.stop()

if "prompt_category" not in st.session_state:
    st.session_state.prompt_category = "Admissions"

def select_admissions():
    st.session_state.prompt_category = "Admissions"

def select_schools_courses():
    st.session_state.prompt_category = "Schools/Courses"

# region <--------- Streamlit App Configuration --------->
st.set_page_config(
    layout="centered",
    page_title="PSSE_Chat"
)
# endregion <--------- Streamlit App Configuration --------->

st.title("Post-Secondary School Education AI Chatbot")
st.subheader(f"Ask questions about {st.session_state.prompt_category}")

col1, col2, col3, col4 = st.columns(4)
with col1:
    st.button("Admissions", on_click=select_admissions)
with col2:
    st.button("Schools/Courses", on_click=select_schools_courses)

form = st.form(key="form")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = None

#~~~ callback function to clear chat history
def clear_chat_history():
    match st.session_state.prompt_category:
        case "Admissions":
            cm_a()
            st.session_state.chat_history = None
        case "Schools/Courses":
            cm_c()
            st.session_state.chat_history = None

#~~~ callback function to update chat history after every submit
def get_chat_history():
    match st.session_state.prompt_category:
        case "Admissions":
            st.session_state.chat_history = gch_a()
        case "Schools/Courses":
            st.session_state.chat_history = gch_c()

df_list = None
user_prompt = form.text_area("What would you like to know about?", height=200)
if form.form_submit_button("Submit"):
    st.toast(f"User Input Submitted - {user_prompt}")
    #response = llm.get_completion(user_prompt) # <--- This calls the helper function that we have created ðŸ†•
    #response = admissions_invoke_question(user_prompt)
    #prompt_category = categorise_prompt(user_prompt)
    #response = courses_invoke_question(user_prompt)
    match st.session_state.prompt_category:
        case "Admissions":
            response = admissions_invoke_question(user_prompt)
        case "Schools/Courses":
            response, df_list = courses_invoke_question(user_prompt)
            #print(df_list.to_string())
        case _:
            response = "Please select one of the question categories to begin."

    print(f"\n\nUser Input is {user_prompt}")
    st.write(response) # <--- This displays the response generated by the LLM onto the frontend ðŸ†•
    #st.write(prompt_category) # <--- This displays the response generated by the LLM onto the frontend ðŸ†•
    if df_list is not None:
        st.dataframe(df_list)

    #~~~ update chat history after each submit
    get_chat_history()

c1 = st.container()
with c1:
    with st.expander(f"Chat Summary on {st.session_state.prompt_category}"):
        st.write(f'''
            {st.session_state.chat_history}
        ''')
        #st.dataframe(st.session_state.chat_history)
        st.button("Clear Chat", on_click=clear_chat_history)
